{"version":3,"file":"view.js","mappings":";;;;AAAAA,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,EAAE,YAAY;EACtD;EACA,MAAMC,IAAI,GAAGF,QAAQ,CAACG,cAAc,CAAC,2BAA2B,CAAC;;EAEjE;EACAC,KAAK,CAAC,4CAA4C,EAAE;IAClDC,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,YAAY,EAAEC,aAAa,CAACC,KAAK,CAAE;IACrC;EACF,CAAC,CAAC,CACCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;IACZ,IAAIA,IAAI,IAAIA,IAAI,CAACC,IAAI,EAAE;MACrB;MACA,IAAI,OAAOC,OAAO,KAAK,WAAW,EAAE;QAClC;QACA,MAAMC,MAAM,GAAGD,OAAO,CAACE,YAAY;QACnC,IAAID,MAAM,EAAE;UACVE,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;UACzBD,OAAO,CAACC,GAAG,CAACN,IAAI,CAACC,IAAI,CAAC;UACtB;UACEI,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;UACzBH,MAAM,CAACI,UAAU,CAACP,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC;UAChC;QACF,CAAC,MAAM;UACLI,OAAO,CAACG,KAAK,CAAC,2CAA2C,CAAC;QAC5D;MACF,CAAC,MAAM;QACLH,OAAO,CAACG,KAAK,CAAC,6BAA6B,CAAC;MAC9C;IACF;EACF,CAAC,CAAC,CACDC,KAAK,CAACD,KAAK,IAAI;IACdH,OAAO,CAACG,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;EAC9C,CAAC,CAAC;;EAEJ;EACAlB,IAAI,CAACD,gBAAgB,CAAC,QAAQ,EAAE,UAAUqB,CAAC,EAAE;IAC3CA,CAAC,CAACC,cAAc,CAAC,CAAC,CAAC,CAAC;;IAEpB;IACA,MAAMR,MAAM,GAAGD,OAAO,CAACE,YAAY;IACnC,IAAID,MAAM,EAAE;MACV,MAAMS,WAAW,GAAGT,MAAM,CAACU,UAAU,CAAC,CAAC,CAAC,CAAC;;MAEzC;MACA,MAAMjB,KAAK,GAAGD,aAAa,CAACC,KAAK;;MAEjC;MACA,MAAMI,IAAI,GAAG;QACXC,IAAI,EAAEW;MACR,CAAC;;MAED;MACApB,KAAK,CAAC,6CAA6C,EAAE;QACnDC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,YAAY,EAAEE,KAAK,CAAE;QACvB,CAAC;QACDkB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAChB,IAAI;MAC3B,CAAC,CAAC,CACCH,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;QACZ,IAAIA,IAAI,CAACiB,OAAO,EAAE;UAChBZ,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;QACzC,CAAC,MAAM;UACLD,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;QACpD;MACF,CAAC,CAAC,CACDG,KAAK,CAACD,KAAK,IAAI;QACdH,OAAO,CAACG,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;QAC9BU,KAAK,CAAC,qCAAqC,CAAC;MAC9C,CAAC,CAAC;IACN;EACF,CAAC,CAAC;AACJ,CAAC,CAAC,C","sources":["webpack://private-student-notes/./src/view.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', function () {\n    // Get the form element and the editor content field\n    const form = document.getElementById('private-student-note-form');\n    \n    // Fetch the existing note content when the page loads\n    fetch('/wp-json/private-student-notes/v1/get-note', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-WP-Nonce': wpApiSettings.nonce, // Include nonce for authentication\n      },\n    })\n      .then(response => response.json())\n      .then(data => {\n        if (data && data.note) {\n          // Wait for TinyMCE to initialize\n          if (typeof tinymce !== 'undefined') {\n            // Ensure TinyMCE is fully initialized before setting content\n            const editor = tinymce.activeEditor;\n            if (editor) {\n              console.log('got editor');\n              console.log(data.note);\n              //editor.on('init', function () {\n                console.log('init issit');\n                editor.setContent(data.note); // Set the fetched content into the editor\n              //});\n            } else {\n              console.error('TinyMCE active editor is not initialized.');\n            }\n          } else {\n            console.error('TinyMCE is not initialized.');\n          }\n        }\n      })\n      .catch(error => {\n        console.error('Error fetching note:', error);\n      });\n  \n    // Handle form submission\n    form.addEventListener('submit', function (e) {\n      e.preventDefault(); // Prevent default form submission behavior\n  \n      // Get the content from the active wp_editor (TinyMCE) field\n      const editor = tinymce.activeEditor;\n      if (editor) {\n        const noteContent = editor.getContent(); // Retrieve the editor content\n  \n        // Get the nonce from the wpApiSettings object\n        const nonce = wpApiSettings.nonce;\n  \n        // Prepare the data to send via AJAX\n        const data = {\n          note: noteContent\n        };\n  \n        // Send the data to the REST API endpoint via a POST request\n        fetch('/wp-json/private-student-notes/v1/save-note', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'X-WP-Nonce': nonce, // Add the nonce to the request headers\n          },\n          body: JSON.stringify(data),\n        })\n          .then(response => response.json())\n          .then(data => {\n            if (data.success) {\n              console.log('Note saved successfully!');\n            } else {\n              console.log('There was an error saving the note.');\n            }\n          })\n          .catch(error => {\n            console.error('Error:', error);\n            alert('There was an error saving the note.');\n          });\n      }\n    });\n  });\n  "],"names":["document","addEventListener","form","getElementById","fetch","method","headers","wpApiSettings","nonce","then","response","json","data","note","tinymce","editor","activeEditor","console","log","setContent","error","catch","e","preventDefault","noteContent","getContent","body","JSON","stringify","success","alert"],"sourceRoot":""}